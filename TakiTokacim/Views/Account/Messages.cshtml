@model List<EntitiyLayer.Models.Contact>
@{
    ViewData["Title"] = "Mesajlar";
}
<h2 class="fw-bold mb-4" style="color:#e67e22;">Gelen Mesajlar</h2>
<table class="table table-hover table-bordered align-middle">
    <thead class="table-warning">
        <tr>
            <th>#</th>
            <th>Ad Soyad</th>
            <th>E-posta</th>
            <th>Mesaj</th>
            <th>Tarih</th>
            <th>İşlemler</th>
        </tr>
    </thead>
    <tbody>
        @for (int i = 0; i < Model.Count; i++) {
            var item = Model[i];
            <tr class="@(item.IsRead ? "" : "table-info fw-bold")">
                <td>@(i+1)</td>
                <td>@item.UserNameLName</td>
                <td>@item.UserMail</td>
                <td>@(item.Message.Length > 30 ? item.Message.Substring(0, 30) + "..." : item.Message)</td>
                <td>@item.CreateDateMessage.ToString("g")</td>
                <td>
                    <button class="btn btn-sm btn-primary me-2" data-bs-toggle="modal" data-bs-target="#detailModal" data-id="@item.ContactId" data-name="@item.UserNameLName" data-mail="@item.UserMail" data-message="@item.Message" data-date="@item.CreateDateMessage.ToString("g")" data-isread="@item.IsRead">
                        <i class="bi bi-eye"></i> Detay
                    </button>
                    <button class="btn btn-sm btn-danger" onclick="deleteMessage(@item.ContactId, this)"><i class="bi bi-trash"></i> Sil</button>
                </td>
            </tr>
        }
    </tbody>
</table>
<!-- Detay Modal -->
<div class="modal fade" id="detailModal" tabindex="-1" aria-labelledby="detailModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="detailModalLabel">Mesaj Detayı</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div><strong>Ad Soyad:</strong> <span id="modalName"></span></div>
        <div><strong>E-posta:</strong> <span id="modalMail"></span></div>
        <div><strong>Tarih:</strong> <span id="modalDate"></span></div>
        <hr>
        <div><strong>Mesaj:</strong></div>
        <div id="modalMessage" class="mt-2"></div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Kapat</button>
      </div>
    </div>
  </div>
</div>
@section Scripts {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <script>
        // Detay modalı doldur
        var detailModal = document.getElementById('detailModal');
        detailModal.addEventListener('show.bs.modal', function (event) {
            var button = event.relatedTarget;
            document.getElementById('modalName').textContent = button.getAttribute('data-name');
            document.getElementById('modalMail').textContent = button.getAttribute('data-mail');
            document.getElementById('modalDate').textContent = button.getAttribute('data-date');
            document.getElementById('modalMessage').textContent = button.getAttribute('data-message');
            // Okundu işaretle (AJAX)
            var id = button.getAttribute('data-id');
            var isRead = button.getAttribute('data-isread') === 'True';
            var row = button.closest('tr');
            if (!isRead) {
                fetch('/Account/MarkAsRead/' + id, {
                    method: 'POST',
                    headers: { 'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() }
                })
                .then(() => {
                    // Satırı güncelle
                    row.classList.remove('table-info', 'fw-bold');
                    // Badge'i güncelle
                    var badge = document.querySelector('.dropdown-item .badge');
                    if (badge) {
                        var count = parseInt(badge.textContent);
                        if (count > 1) {
                            badge.textContent = count - 1;
                        } else {
                            badge.remove();
                        }
                    }
                    // Butonun data-isread'ini güncelle
                    button.setAttribute('data-isread', 'True');
                });
            }
        });
        // Silme işlemi
        function deleteMessage(id, btn) {
            if (confirm('Bu mesajı silmek istediğinize emin misiniz?')) {
                fetch('/Account/DeleteMessage/' + id, { method: 'POST', headers: { 'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() } })
                    .then(r => r.json())
                    .then(res => {
                        if (res.success) {
                            btn.closest('tr').remove();
                        } else {
                            alert('Silinemedi!');
                        }
                    });
            }
        }
    </script>
} 